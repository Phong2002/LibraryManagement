package View;

import DAO.BooksDAO;
import Entity.AwaitingApproval;
import Entity.Book;
import Entity.CallCard;
import DAO.CallCardDAO;
import Form.FilterForm;

/**
 *
 * @author Phong Lu Minh
 */
import Entity.User;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import DAO.AwaitingApprovalDAO;
import DAO.ReturnBookDAO;
import Entity.ReturnBook;
import java.awt.Color;
import javax.swing.JFrame;
public class HomeBorrower extends javax.swing.JFrame {

    private User user;
    private List<AwaitingApproval> picks = new ArrayList<>();
    private List<AwaitingApproval> awaitingApprovalList;
    private  AwaitingApprovalDAO awaitingApprovalDAO;
    private CallCardDAO callCardDAO;
    private int numberOfBooksBorrowing;
    private BooksDAO booksDAO;
    /**
     * Creates new form HomLibrarian
     */
    public HomeBorrower(User user) {
        this.user = user;
        initComponents();
        
        FilterForm filterForm = new FilterForm();
        booksDAO = new BooksDAO();
        List<Book> listBook = booksDAO.findAll(filterForm);
        awaitingApprovalDAO = new AwaitingApprovalDAO();
        callCardDAO = new CallCardDAO();
        awaitingApprovalList = awaitingApprovalDAO.findByLibraryCard(user.getLibraryCard());
        DefaultTableModel tbBooks = (DefaultTableModel) tableListBook.getModel();
        tbBooks.setRowCount(0);
        for (Book book : listBook) {
            int numberOfBook = book.getTotalQuantity()-callCardDAO.numberOfBorrowingBooksByBookId(book.getBookId());
            tbBooks.addRow(new Object[]{book.getBookId(), book.getName(), book.getPublisher(), book.getYearOfPublisher(), book.getAuthor(), book.getSubject(),numberOfBook});
        }
        
        ReturnBookDAO returnBookDAO = new ReturnBookDAO();
        ReloadAwaitingApproval();
        List<CallCard> callCards = callCardDAO.findByLibraryCard(user.getLibraryCard());
        DefaultTableModel tbHistory = (DefaultTableModel) tableHistory.getModel();
        tbHistory.setRowCount(0);
        for (CallCard callCard : callCards) {
            ReturnBook returnBook = returnBookDAO.findByCallCardId(callCard.getCallCardId());
            if(returnBook.getReturnBookId()==null){
                tbHistory.addRow(new Object[]{callCard.getCallCardId(),callCard.getBorrowedDate().toString(),callCard.getBook().getName(),
                callCard.getBook().getPublisher(),callCard.getBook().getYearOfPublisher(),callCard.getBook().getAuthor(),callCard.getBorrowedDay(),
                "Chưa trả"});
            }
            else{
                tbHistory.addRow(new Object[]{callCard.getCallCardId(),callCard.getBorrowedDate().toString(),callCard.getBook().getName(),
                callCard.getBook().getPublisher(),callCard.getBook().getYearOfPublisher(),callCard.getBook().getAuthor(),callCard.getBorrowedDay(),
                returnBook.getPayDay().toString(),returnBook.getFines(),returnBook.getNote()});
            }
            
            
        }
    }

    public HomeBorrower() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        home = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        booksList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputSearch = new javax.swing.JTextPane();
        buttonSearch = new javax.swing.JButton();
        typeSearch = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        typeSubjectFilter = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableListBook = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        bookDetails = new javax.swing.JButton();
        totalAwaiting = new javax.swing.JLabel();
        bookLoanList = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableAwaitingApproval = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        pickList = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        addToAwaiting = new javax.swing.JButton();
        number = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableHistory = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(0, 0, 153));
        jPanel3.setPreferredSize(new java.awt.Dimension(1280, 700));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 51, 0));
        jLabel1.setText("Thư viện trường đại học Phenikaa");

        logout.setBackground(new java.awt.Color(204, 204, 255));
        logout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Logout-icon.png"))); // NOI18N
        logout.setText("Đăng xuất");
        logout.setToolTipText("");
        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
        });
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        jTabbedPane1.setBackground(new java.awt.Color(204, 204, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        jTabbedPane2.setBackground(new java.awt.Color(0, 204, 204));
        jTabbedPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 51, 255), null, null));
        jTabbedPane2.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(255, 204, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("Trung tâm Thông tin Thư viện Trường Đại học Phenikaa chính thức được thành lập từ ngày 18/9/2020 theo Quyết định số 18/QĐ-ĐHP-HĐT trên cơ sở tách bộ phận Quản lý Thư viện từ Phòng Đào tạo và Quản lý sinh viên.\n\nChức năng nhiệm vụ của Trung tâm Thông tin Thư viện được quy định tại Quy định chức năng nhiệm vụ Phòng/Ban/Khoa/Viện/Trung tâm trực thuộc Trường Đại học Phenikaa.\n\nTRUNG TÂM THÔNG TIN THƯ VIỆN PHENIKAA UNI là nơi Hỗ trợ học tập / nghiên cứu / đổi mới / khởi nghiệp (Learn - Study / Research / Innovate / StartUp); Phát sinh ý tưởng mới (Ideas); Giao lưu, hợp tác, kết nối, chia sẻ học thuật (Collaborate – Connect - Sharing); Là nơi truyền cảm hứng nghiên cứu, sáng tạo (Inspire, Create).\n\nTrung tâm Thông tin - Thư viện ứng dụng và triển khai phần mềm quản trị thư viện điện tử Koha, Thư viện số Dspace, Cổng thông tin Thư viện, áp dụng các tiêu chuẩn quốc tế về mô tả biên mục AACR2, DublinCore, khung phân loại DDC, để nâng cao hiệu quả hoạt động thông tin thư viện, kết nối, hợp tác, chia sẻ tài nguyên với các Trung tâm Thông tin – Thư viện của các trường đại học trong nước và các cơ sở dữ liệu quốc tế.\n\nHơn 40.000 tài liệu in và ~4000 tài liệu số - 7 cơ sở dữ liệu khoa học trực tuyến và các nguồn học liệu mở - Hoạt động lưu thông tài liệu trên nền tảng PC và Mobile với kết nối nhanh, giao diện thân thiện, dễ sử dụng.\n\nKhông gian đọc sách mở với tổng diện tích gần 3.200m2 được thiết kế dọc các dãy hành lang chính thuộc 2 dãy tòa nhà chẵn - lẻ.\n\nĐịa điểm: Phòng 102-105 A4 (PULIC mới T4,5,6 Tòa A10)\nPhòng đọc của Trung tâm Thông tin Thư viện bạn đọc sẽ được tự do khám phá, trải nghiệm tìm kiếm kho sách theo các ngành khoa học, các lĩnh vực nghiên cứu, học tập, giải trí. Bạn đọc được trang bị các thiết bị tra cứu trực tuyến, các phần mềm thư viện điện tử, thư viện số hoạt động trên các thiết bị di động thông minh để tối ưu hóa trải nghiệm tìm kiếm khai thác sách in và đọc tài liệu số trực tuyến.\n\nKhông gian đọc sách, nghiên cứu, học tập không bị gò bó trong các phòng đọc, bạn đọc có thể mượn tài liệu và mang tài liệu tới Không gian mở để đọc một cách thoải mái với không gian tràn ngập ánh sáng, hòa mình cũng thiên nhiên cây lá cũng như không bị giới hạn về thời gian.\n\nGiờ mở cửa:\n            - Phòng đọc: Từ Thứ 2 – Thứ 6; sáng 8h-12h; chiều từ 13h-17h\n\n            - Phòng tự học: P204.A4 mở cửa 24/7\n\nCác đường link truy cập:\n            + Cổng thông tin thư viện: http://library.phenikaa-uni.edu.vn\n\n            + Thư viện điện tử: http://elib.phenikaa-uni.edu.vn\n\n            + Thư viện số: http://dlib.phenikaa-uni.edu.vn\n\nMột số liên kết quan trọng bạn đọc không thể bỏ qua:\n            + Nội quy thư viện: https://library.phenikaa-uni.edu.vn/node/156\n\n           + Một số khoản thu tại Trung tâm Thông tin Thư viện: https://library.phenikaa-uni.edu.vn/node/157\n\n            + Hướng dẫn sử dụng Thư viện: https://library.phenikaa-uni.edu.vn/node/191");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setMargin(new java.awt.Insets(20, 20, 20, 20));
        jScrollPane4.setViewportView(jTextArea2);

        jTabbedPane2.addTab("Giới thiệu", jScrollPane4);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(153, 255, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("NỘI QUY TRUNG TÂM THÔNG TIN - THƯ VIỆN\n\nTRƯỜNG ĐẠI HỌC PHENIKAA\n\n(Ban hành kèm theo Quyết định số 07/QĐ-ĐHP-TTTV ngày 05 tháng 01 năm 2021)\n\n          Điều 1. Đối tượng sử dụng\n\n- Cán bộ, giảng viên, sinh viên, học viên các hệ đào tạo của Trường Đại học Phenikaa (sau đây gọi tắt là “Nhà trường”).\n\n- Đối tượng thuộc diện liên kết của Trung tâm Thông tin - Thư viện Trường Đại học Phenikaa (sau đây viết tắt là “Trung tâm TTTV”): Bạn đọc không thuộc Nhà trường, có nhu cầu sử dụng sản phẩm, dịch vụ của Trung tâm Thông tin - Thư viện phải có Giấy giới thiêụ của cơ quan chủ quản, kèm theo Chứng minh thư nhân dân/Căn cước công dân, lệ phí ký cược và phí dịch vụ theo quy định của Trung tâm TTTV.\n\n- Người sử dụng được cấp quyền sử dụng sản phẩm, dịch vụ của Trung tâm TTTV khi có đủ các điều kiện sau:\n\n          + Có tài khoản cán bộ, giảng viên, sinh viên, học viên của Trường hoặc thẻ sử dụng Thư viện đối với người sử dụng diện liên kết của Trung tâm Thông tin -Thư viện\n\n          + Tham gia và hoàn thành các lớp tập huấn sử dụng Thư viện và nộp kinh phí đặt cọc sử dụng sản phẩm, dịch vụ của Trung tâm TTTV (không áp dụng đối với cán bộ, giảng viên của Trường).\n\n          Điều 2. Trách nhiệm của người sử dụng sản phẩm, dịch vụ của Trung tâm Thông tin - Thư viện\n\n          - Không sử dụng thẻ/tài khoản của người khác và không cho người khác mượn thẻ/tài khoản. Khi mất thẻ, quên mật khẩu, phải báo ngay cho Trung tâm Thông tin - Thư viện để làm thủ tục bảo mật và được hỗ trợ.\n\n          - Xuất trình thẻ và gửi đồ vào nơi quy định; Tự bảo quản tư trang và các vật dụng cá nhân có giá trị khác.\n\n          - Chấp hành các quy định của Thư viện về việc sử dụng tài liệu, cơ sở vật chất, trang thiết bị của Thư viện.\n\n          - Giữ gìn, bảo quản tài nguyên thông tin, trang thiết bị, cơ sở vật chất của Trung tâm Thông tin - Thư viện trong quá trình sử dụng.\n\n          - Giữ trật tự, an ninh, an toàn cháy nổ và vệ sinh môi trường: không hút thuốc, không mang những vật dụng dễ cháy, nổ và đồ ăn uống (ngoài nước uống đóng chai) vào Trung tâm Thông tin – Thư viện.\n\n          - Chụp ảnh, quay phim trong khuôn viên Trung tâm Thông tin - Thư viện phải được sự đồng ý của Nhà trường.\n\n          - Xuất trình thẻ, các tài liệu, túi xách và các vật dụng khác khi có yêu cầu kiểm tra của cán bộ Thư viện.\n\n          - Tự bảo vệ thông tin cá nhân, tài khoản và mật khẩu được cấp từ Nhà trường.\n\n          - Trả lại các tài liệu chưa làm thủ tục mượn trước khi rời khỏi Trung tâm Thông tin -Thư viện.\n\n          Điều 3. Sử dụng tài liệu thư viện\n\nThời hạn mượn tài liệu tuỳ thuộc vào từng đối tượng bạn đọc và từng loại tài liệu. Hết thời hạn, nếu muốn mượn tiếp bạn đọc phải mang tài liệu đến xin gia hạn và chỉ được mượn tài liệu mới khi đã trả tài liệu cũ.\n\n1. Đối với bạn đọc là sinh viên, học viên:\n\nNgười sử dụng được mượn về nhà tối đa 05 tài liệu/1 lần, trong đó:\n\n      - Đối với các giáo trình: số lượng tối đa 10 cuốn, được mượn 150 ngày/ tài liệu và không được phép gia hạn.\n\n      - Đối với tài liệu tham khảo chuyên ngành: số lượng tối đa 05 cuốn, được mượn tối đa 90 ngày/tài liệu và được gia hạn tối đa 02 lần mỗi lần 03 ngày.\n\n      - Đối với tạp chí chuyên ngành: được mượn 14 ngày/ tài liệu và không được phép gia hạn.\n\n      - Đối với sách tham khảo: số lượng tối đa mượn là 03 cuốn, được mượn 15 ngày và không được phép gia hạn.\n\n      - Đối với tài liệu có dán 01 dấu đỏ (tài liệu nội sinh, tài liệu quý hiếm, tài liệu tra cứu, …), báo – tạp chí khác: không được mượn về nhà.\n\n          2. Đối với cán bộ, giảng viên:     \n\n      - Đối với các giáo trình: số lượng tối đa 10 cuốn, được mượn không giới hạn thời gian đối với giáo trình thuộc bộ môn giảng dạy.\n\n      - Đối với tài liệu tham khảo chuyên ngành: số lượng tối đa 05 cuốn, được mượn không giới hạn thời gian đối với giáo trình thuộc bộ môn giảng dạy.\n\n      - Đối với tạp chí chuyên ngành: được mượn 14 ngày/ tài liệu và không được phép gia hạn.\n\n      - Đối với sách tham khảo: số lượng tối đa mượn là 03 cuốn, được mượn 15 ngày và không được phép gia hạn.\n\n      - Đối với tài liệu có dán 01 dấu đỏ (tài liệu nội sinh, tài liệu quý hiếm, tài liệu tra cứu, tài liệu độc bản …), báo – tạp chí khác: không được mượn về nhà.\n\n      3. Đối với nghiên cứu viên:\n\n      - Đối với các giáo trình: số lượng tối đa 05 cuốn, được mượn 150 ngày/ tài liệu và không được phép gia hạn.\n\n      - Đối với tài liệu tham khảo chuyên ngành: số lượng tối đa 05 cuốn, được mượn tối đa 90 ngày/tài liệu và được gia hạn tối đa 02 lần mỗi lần 03 ngày.\n\n      - Đối với tạp chí chuyên ngành: được mượn 14 ngày/ tài liệu và không được phép gia hạn.\n\n      - Đối với sách tham khảo: số lượng tối đa mượn là 03 cuốn, được mượn 15 ngày và không được phép gia hạn.\n\n      - Đối với tài liệu có dán 01 dấu đỏ (tài liệu nội sinh, tài liệu quý hiếm, tài liệu tra cứu, …), báo – tạp chí khác: không được mượn về nhà.\n\n      4. Với các bạn đọc không thuộc các đối tượng trên:\n\n      - Áp dụng chính sách lưu thông tối thiểu quy định trên Phần mềm quản lý Thư viện:\n\n      - Số lượng mượn tối đa với các tài liệu (trừ tài liệu thuộc tài liệu không cho mượn: 03 cuốn\n\n      - Thời gian mượn tối đa 15 ngày, không được phép gia hạn.\n\n          Điều 4. Đối với phòng đọc sách, luận văn/ kho mở\n\nTrung tâm Thông tin - Thư viện có những không gian mở dành cho bạn đọc, bạn đọc được sử dụng mọi không gian mở trong thư viện để đọc tài liệu.\n\n          Bạn đọc tự chọn tài liệu trên giá sách, theo bảng chỉ dẫn chuyên ngành, không tráo đổi vị trí tài liệu. Bạn đọc được lấy không quá 02 cuốn cho 1 lần sử dụng.\n\n          Bạn đọc mang tài liệu qua quầy thủ thư để ghi mượn tài liệu (Áp dụng cho ghi mượn đọc tại chỗ và ghi mượn về nhà).\n\n          Đọc xong, bạn đọc chuyển tài liệu qua quầy Thủ thư để ghi trả và xếp tài liệu về vị trí quy định tại phòng đọc theo hướng dẫn của Thủ thư.\n\n          Điều 5. Đối với tra cứu tìm tin\n\n          Thư viện có hệ thống danh mục và máy tính cho bạn đọc tra cứu tìm tin. Máy tính dùng cho tra cứu tìm tin, bạn đọc không được sử dụng vào việc cá nhân khác ngoài việc tìm tin. Nghiêm cấm mọi hành vi can thiệp cá nhân vào cài đặt máy tính, gây thiệt hại đến hệ thống tra cứu của thư viện.\n\n          Điều 6. Đối với đọc báo, tạp chí\n\n          Bạn đọc tự tìm báo, tạp chí tham khảo ở trên giá, mỗi lần lấy báo, tạp chí ra bàn đọc, bạn đọc không được lấy quá 3 tên báo, hay tạp chí. Không được mang tài liệu ra ngoài phòng, bạn đọc có nhu cầu sao chép tài liệu, đăng ký với thủ thư để được phục vụ đảm bảo đúng Luật Sở hữu trí tuệ.\n\n          Điều 7. Đối với việc sao chép tài liệu\n\n          Tuyệt đối không sử dụng máy tính, điện thoại hay máy chụp ảnh để sao chép, chụp ảnh tài liệu khi chưa được phép. Nếu có nhu cầu sao chép tài liệu, bạn đọc đăng ký với thủ thư để được phục vụ đảm bảo đúng Luật Sở hữu trí tuệ.\n\n          Điều 8. Đối với việc truy cập Internet - Dữ liệu điện tử\n\n          Chỉ được sử dụng máy tính để khai thác, tìm kiếm thông tin phục vụ cho mục đích học tập và nghiên cứu khoa học. Không vào những trang Web có nội dung không lành mạnh. Khi cần sao chép dữ liệu điện tử, bạn đọc liên hệ với cán bộ thư viện để được phục vụ.\n\n          Điều 9. Thủ tục mượn sách\n\n          - Bạn đọc phải xuất trình thẻ sinh viên/tài khoản bạn đọc cho Thủ thư trước khi mượn tài liệu.\n\n          - Mượn trực tiếp: Bạn đọc chọn tài liệu và tiến hành ghi mượn với Thủ thư tại quầy.\n\n          - Mượn trực tuyến: Bạn đọc đặt mượn tài liệu trực tuyến, đến Trung tâm Thông tin – Thư viện nhận sách theo thông tin đã nhận được trên Tài khoản bạn đọc.\n\n          - Kiểm tra số lượng và tình trạng tài liệu trước khi rời khỏi Trung tâm Thông tin – Thư viện.\n\n          Điều 10. Các hình thức xử lý vi phạm nội quy\n\n          Người sử dụng vi phạm các quy định trong Nội quy này, tùy theo trường hợp, tính chất, mức độ vi phạm mà áp dụng những hình thức xử lý như sau:\n\n          - Khóa tài khoản tạm thời hoặc đình chỉ quyền sử dụng các sản phẩm, dịch vụ của Trung tâm TTTV.\n\n          - Xử phạt hành chính.\n\n          - Bồi thường thiệt hại bằng hiện vật hoặc bằng tiền.\n\n          - Mức phạt và bồi thường bằng tiền đối với các trường hợp cụ thể được thực hiện theo quy định của Nhà trường.\n\n          - Trong trường hợp vi phạm nghiêm trọng, người vi phạm có thể bị kỷ luật và truy cứu trách nhiệm hình sự theo quy định của pháp luật.\n\n          Điều 11. Bảo quản tài liệu, tài sản, khen thưởng, kỷ luật\n\n          - Tuyệt đối không mang tài liệu ra khỏi phòng đọc khi chưa được phép của cán bộ thư viện. Không tráo đổi, cắt xén, đánh dấu làm rách nát, hư hỏng tài liệu; không viết nháp hoặc ghi chép vào các trang sách, báo, tạp chí và các tài liệu khác.\n\n          - Không được sao chụp trái phép các tài liệu của thư viện. Khi sử dụng máy tính tra cứu, danh mục ... phải thực hiện đúng hướng dẫn. Nghiêm cấm mọi hành vi gây thiệt hại đến vốn tài liệu, tài sản và cơ sở vật chất của thư viện.\n\n          - Bạn đọc phải nghiêm chỉnh chấp hành những quy định trên đây. Mọi vi phạm, tuỳ theo mức độ sẽ chịu xử lý theo các hình thức kỷ luật sau:\n\n          + Nhắc nhở, cảnh cáo\n\n          + Đình chỉ quyền sử dụng thư viện từ 10 ngày đến vĩnh viễn.\n\n          + Bồi thường thiệt hại. Mức bồi thường do Nhà trường xem xét quyết định.\n\n          + Đề nghị nhà trường có hình thức xử lý kỷ luật.\n\n          + Đề nghị truy tố trước pháp luật.\n\n          - Hoan nghênh và ưu tiên phục vụ bạn đọc thực hiện tốt nội quy của Trung tâm TTTV và phát hiện những vi phạm của bạn đọc khác.\n\n          - Khi có ý kiến đóng góp về tình hình tài liệu hoặc tác phong làm việc của cán bộ thư viện, các ý kiến của bạn đọc xin gửi vào: \"Hòm thư góp ý\" tại Trung tâm TTTV, hay hộp thư điện tử: library@phenikaa-uni.edu.vn (Chú ý: Thư góp ý cần ghi rõ Họ tên, đơn vị, lớp. Mọi thư nặc danh coi như không có giá trị).\n\n          - Các trường hợp khen thưởng:\n\n          + Người sử dụng có lượt sử dụng Thư viện nhiều nhất.\n\n          + Người sử dụng tham gia tích cực vào các hoạt động của Thư viện.\n\n          + Các hình thức khen thưởng: tuyên dương, tặng quà.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setMargin(new java.awt.Insets(20, 20, 20, 20));
        jScrollPane3.setViewportView(jTextArea1);

        jTabbedPane2.addTab("Nội quy thư viện", jScrollPane3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1220, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout homeLayout = new javax.swing.GroupLayout(home);
        home.setLayout(homeLayout);
        homeLayout.setHorizontalGroup(
            homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        homeLayout.setVerticalGroup(
            homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Trang chủ", new javax.swing.ImageIcon(getClass().getResource("/Images/home.png")), home); // NOI18N

        booksList.setBackground(new java.awt.Color(153, 255, 204));

        inputSearch.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inputSearch.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(inputSearch);

        buttonSearch.setBackground(new java.awt.Color(204, 255, 255));
        buttonSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/search-icon.png"))); // NOI18N
        buttonSearch.setText("Tìm kiếm");
        buttonSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonSearchMouseClicked(evt);
            }
        });

        typeSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Tên Sách", "Tên Tác Giả" }));
        typeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeSearchActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Tìm kiếm theo");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Thể loại");

        typeSubjectFilter.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeSubjectFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Sách Chính trị - pháp luật", "Sách Khoa học công nghệ – Kinh tế", "Sách Văn học nghệ thuật", "Sách Văn hóa xã hội – Lịch sử", "Sách Giáo trình", "Sách Truyện, tiểu thuyết", "Sách Tâm lý, tâm linh, tôn giáo", "Sách thiếu nhi" }));

        tableListBook.setAutoCreateRowSorter(true);
        tableListBook.setBackground(new java.awt.Color(235, 246, 249));
        tableListBook.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableListBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tên sách", "Nhà xuất bản", "Năm xuất bản", "Tác giả", "Thể loại"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableListBook.setIntercellSpacing(new java.awt.Dimension(5, 5));
        tableListBook.setRowHeight(30);
        jScrollPane2.setViewportView(tableListBook);

        jButton3.setBackground(new java.awt.Color(255, 153, 255));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setText("Thêm vào danh sách mượn");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        bookDetails.setBackground(new java.awt.Color(0, 204, 255));
        bookDetails.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bookDetails.setText("Xem chi tiết");
        bookDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookDetailsMouseClicked(evt);
            }
        });

        totalAwaiting.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        totalAwaiting.setForeground(new java.awt.Color(255, 0, 0));
        totalAwaiting.setText("0");

        javax.swing.GroupLayout booksListLayout = new javax.swing.GroupLayout(booksList);
        booksList.setLayout(booksListLayout);
        booksListLayout.setHorizontalGroup(
            booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booksListLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(booksListLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(10, 10, 10))
                    .addGroup(booksListLayout.createSequentialGroup()
                        .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(typeSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(typeSubjectFilter, 0, 255, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(booksListLayout.createSequentialGroup()
                                .addComponent(bookDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(totalAwaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(booksListLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSearch)))
                        .addContainerGap(354, Short.MAX_VALUE))))
        );
        booksListLayout.setVerticalGroup(
            booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booksListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(typeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(buttonSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(booksListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton3)
                    .addComponent(typeSubjectFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalAwaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookDetails))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );

        jTabbedPane1.addTab("Sách", new javax.swing.ImageIcon(getClass().getResource("/Images/book.png")), booksList); // NOI18N

        jPanel4.setBackground(new java.awt.Color(242, 189, 245));

        TableAwaitingApproval.setBackground(new java.awt.Color(255, 238, 236));
        TableAwaitingApproval.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        TableAwaitingApproval.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Mã Sách", "Tên Sách", "Nhà Xuất Bản", "Tác Giả", "Thể Loại", "Số Ngày Mượn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableAwaitingApproval.setIntercellSpacing(new java.awt.Dimension(5, 5));
        TableAwaitingApproval.setRowHeight(30);
        jScrollPane5.setViewportView(TableAwaitingApproval);

        pickList.setBackground(new java.awt.Color(255, 239, 242));
        pickList.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pickList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Sách", "Tên Sách", "Nhà Xuất Bản", "Tác Giả", "Thể Loại", "Số Ngày Mượn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pickList.setIntercellSpacing(new java.awt.Dimension(5, 5));
        pickList.setRowHeight(30);
        jScrollPane6.setViewportView(pickList);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jLabel4.setText("Danh sách đang chờ duyệt");

        jButton1.setBackground(new java.awt.Color(255, 0, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/delete-icon.png"))); // NOI18N
        jButton1.setText("Xóa");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        addToAwaiting.setBackground(new java.awt.Color(51, 255, 51));
        addToAwaiting.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addToAwaiting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/plus-icon.png"))); // NOI18N
        addToAwaiting.setText("Thêm vào danh sách chờ duyệt");
        addToAwaiting.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addToAwaitingMouseClicked(evt);
            }
        });
        addToAwaiting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToAwaitingActionPerformed(evt);
            }
        });

        number.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        number.setForeground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(number, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addToAwaiting)
                .addGap(44, 44, 44)
                .addComponent(jButton1)
                .addGap(627, 627, 627))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1176, Short.MAX_VALUE)
                    .addComponent(jScrollPane6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addToAwaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(number, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout bookLoanListLayout = new javax.swing.GroupLayout(bookLoanList);
        bookLoanList.setLayout(bookLoanListLayout);
        bookLoanListLayout.setHorizontalGroup(
            bookLoanListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bookLoanListLayout.setVerticalGroup(
            bookLoanListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Đăng kí mượn", new javax.swing.ImageIcon(getClass().getResource("/Images/request.png")), bookLoanList); // NOI18N

        jPanel5.setBackground(new java.awt.Color(228, 228, 228));

        tableHistory.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã mượn sách", "Ngày mượn sách", "Tên sách", "Nhà xuất bản", "Năm xuất bản", "Tác giả", "Số ngày mượn", "Ngày trả", "Tiền phạt", "Ghi chú"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableHistory.setIntercellSpacing(new java.awt.Dimension(5, 5));
        tableHistory.setRowHeight(30);
        jScrollPane7.setViewportView(tableHistory);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1165, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Lịch sử mượn", new javax.swing.ImageIcon(getClass().getResource("/Images/File-History-icon.png")), jPanel1); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(216, 216, 216)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 831, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout)
                .addGap(16, 16, 16))
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(27, 27, 27)
                .addComponent(jTabbedPane1))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("jTabbedPanne1");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1426, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logoutActionPerformed

    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseClicked
        Login login = new Login();
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutMouseClicked

    private void typeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeSearchActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void buttonSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSearchMouseClicked
        // TODO add your handling code here:
        FilterForm filterForm = new FilterForm();
        if (!typeSubjectFilter.getSelectedItem().equals("Tất cả")) {
            filterForm.setTypeFilter("subject");
            filterForm.setFilter(typeSubjectFilter.getSelectedItem().toString());
        }
         if(typeSubjectFilter.getSelectedItem().equals("Tất cả")){
             filterForm.setTypeFilter("");
            filterForm.setFilter("");
        }
        switch (typeSearch.getSelectedItem().toString()) {
            case "Tất cả":
                filterForm.setTypeSearch("`name` LIKE '%" + inputSearch.getText() + "%' OR `author`");
                filterForm.setSearch(inputSearch.getText());
                break;
            case "Tên Sách":
                filterForm.setTypeSearch("name");
                filterForm.setSearch(inputSearch.getText());
                break;
            case "Tên Tác Giả":
                filterForm.setTypeSearch("author");
                filterForm.setSearch(inputSearch.getText());
                break;
            default:
                break;
        }
        List<Book> listBook = booksDAO.findAll(filterForm);
        DefaultTableModel tbBooks = (DefaultTableModel) tableListBook.getModel();
        tbBooks.setRowCount(0);
        for (Book book : listBook) {
            tbBooks.addRow(new Object[]{book.getBookId(), book.getName(), book.getPublisher(), book.getYearOfPublisher(), book.getAuthor(), book.getSubject()});
        }
    }//GEN-LAST:event_buttonSearchMouseClicked

    private void bookDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookDetailsMouseClicked
        // TODO add your handling code here:

        if (tableListBook.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn sách để xem chi tiết", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            String bookId = tableListBook.getModel().getValueAt(tableListBook.getSelectedRow(), 0).toString();
            Book book = booksDAO.findByBookId(bookId);
            BookDetails bookDetails = new BookDetails(book);
            bookDetails.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            bookDetails.setVisible(true);
        }
    }//GEN-LAST:event_bookDetailsMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        if (tableListBook.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn sách để đăng kí mượn", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            String bookId = tableListBook.getModel().getValueAt(tableListBook.getSelectedRow(), 0).toString();
            Book book = booksDAO.findByBookId(bookId);
            AwaitingApproval awaitingApproval = new AwaitingApproval();
            awaitingApproval.setBook(book);
            awaitingApproval.setUser(user);

            switch (book.getSubject()) {
                case "Sách Chính trị - pháp luật":
                    awaitingApproval.setBorrowedDay(20);
                    break;
                case "Sách Khoa học công nghệ – Kinh tế":
                    awaitingApproval.setBorrowedDay(15);
                    break;
                case "Sách Văn học nghệ thuật":
                    awaitingApproval.setBorrowedDay(15);
                    break;
                case "Sách Văn hóa xã hội – Lịch sử":
                    awaitingApproval.setBorrowedDay(14);
                    break;
                case "Sách Giáo trình":
                    awaitingApproval.setBorrowedDay(45);
                    break;
                case "Sách Truyện, tiểu thuyết":
                    awaitingApproval.setBorrowedDay(25);
                    break;
                case "Sách Tâm lý, tâm linh, tôn giáo":
                    awaitingApproval.setBorrowedDay(10);
                    break;
                case "Sách thiếu nhi":
                    awaitingApproval.setBorrowedDay(7);
                    break;
                default:
                    break;
            }

            picks.add(awaitingApproval);
            totalAwaiting.setText(String.valueOf(picks.size()));
            reloadNumberOfBooksBorrowing();

            DefaultTableModel pickListsTB = (DefaultTableModel) pickList.getModel();
            pickListsTB.setRowCount(0);
            for (AwaitingApproval await : picks) {
                pickListsTB.addRow(new Object[]{await.getBook().getBookId(), await.getBook().getName(),
                    await.getBook().getPublisher(), await.getBook().getAuthor(), await.getBook().getSubject(), await.getBorrowedDay()});
            }
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        if (pickList.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn sách để xóa ! ", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            int id = pickList.getSelectedRow();
            picks.remove(id);
            DefaultTableModel pickListsTB = (DefaultTableModel) pickList.getModel();
            pickListsTB.setRowCount(0);
            for (AwaitingApproval await : picks) {
                pickListsTB.addRow(new Object[]{await.getBook().getBookId(), await.getBook().getName(),
                    await.getBook().getPublisher(), await.getBook().getAuthor(), await.getBook().getSubject(), await.getBorrowedDay()});
            }
            totalAwaiting.setText(String.valueOf(picks.size()));
            reloadNumberOfBooksBorrowing();
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void addToAwaitingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addToAwaitingMouseClicked
        // TODO add your handling code here:
        if(numberOfBooksBorrowing>5){
             JOptionPane.showMessageDialog(null, "Bạn đã mượn quá số sách , Mỗi người chỉ được mượn tối đa cùng lúc 5 quyển ", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        else{
         AwaitingApprovalDAO awaitingApprovalDAO = new AwaitingApprovalDAO();
         awaitingApprovalDAO.save(picks);
         DefaultTableModel pickListsTB = (DefaultTableModel) pickList.getModel();
         pickListsTB.setRowCount(0);
         picks.clear();
         totalAwaiting.setText("0");
         ReloadAwaitingApproval();
}
    }//GEN-LAST:event_addToAwaitingMouseClicked

    private void addToAwaitingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToAwaitingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addToAwaitingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeBorrower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeBorrower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeBorrower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeBorrower.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeBorrower().setVisible(true);
            }
        });
    }
    
    public void ReloadAwaitingApproval(){
        awaitingApprovalList=awaitingApprovalDAO.findByLibraryCard(user.getLibraryCard());
        DefaultTableModel tableAwaitingApproval = (DefaultTableModel) TableAwaitingApproval.getModel();
        tableAwaitingApproval.setRowCount(0);
        for (AwaitingApproval awaitingApproval : awaitingApprovalList) {
            tableAwaitingApproval.addRow(new Object[]{awaitingApproval.getId(), awaitingApproval.getBook().getBookId()
                    ,awaitingApproval.getBook().getName(), awaitingApproval.getBook().getPublisher(),
                    awaitingApproval.getBook().getAuthor(), awaitingApproval.getBook().getSubject(),awaitingApproval.getBorrowedDay()});
        }
        reloadNumberOfBooksBorrowing();
    }

  
    public void reloadNumberOfBooksBorrowing(){
        numberOfBooksBorrowing = 0;
        numberOfBooksBorrowing += callCardDAO.numberOfBorrowingBooksByUser(user.getLibraryCard());
        numberOfBooksBorrowing += awaitingApprovalDAO.numberOfAwtingApprovalByUser(user.getLibraryCard());
        numberOfBooksBorrowing += picks.size();
        
        if(numberOfBooksBorrowing>5){
            number.setForeground(Color.red);
            number.setText(numberOfBooksBorrowing + "/5");
        }   
        else{
            number.setForeground(Color.blue);
            number.setText(numberOfBooksBorrowing + "/5");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableAwaitingApproval;
    private javax.swing.JButton addToAwaiting;
    private javax.swing.JButton bookDetails;
    private javax.swing.JPanel bookLoanList;
    private javax.swing.JPanel booksList;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JPanel home;
    private javax.swing.JTextPane inputSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton logout;
    private javax.swing.JLabel number;
    private javax.swing.JTable pickList;
    private javax.swing.JTable tableHistory;
    private javax.swing.JTable tableListBook;
    private javax.swing.JLabel totalAwaiting;
    private javax.swing.JComboBox<String> typeSearch;
    private javax.swing.JComboBox<String> typeSubjectFilter;
    // End of variables declaration//GEN-END:variables
}
